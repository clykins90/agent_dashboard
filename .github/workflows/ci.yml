name: CI

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Lint, Typecheck, Test, Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Typecheck (all)
        run: npm run typecheck

      - name: Lint (all)
        run: npm run lint

      - name: Test (web)
        run: npm run test

      - name: Build web (Turbopack)
        run: npm run build

      - name: Build API
        run: npm run api:build

  deploy-preview:
    name: Deploy Preview (Vercel)
    if: github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Vercel Pull (preview)
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: npx vercel pull --yes --environment=preview --token=${{ env.VERCEL_TOKEN }}

      - name: Build (prebuilt, Turbopack)
        run: npx nx run web:next:build --turbopack

      - name: Deploy to Vercel (Preview)
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: npx vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }}

  deploy-production:
    name: Deploy Production (Vercel)
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/main')
    needs: build
    runs-on: ubuntu-latest
    env:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Nx cache
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nx-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nx-

      - name: Vercel Pull (production)
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: npx vercel pull --yes --environment=production --token=${{ env.VERCEL_TOKEN }}

      - name: Build (prebuilt, Turbopack)
        run: npx nx run web:next:build --turbopack

      - name: Deploy to Vercel (Production)
        if: ${{ env.VERCEL_TOKEN != '' && env.VERCEL_ORG_ID != '' && env.VERCEL_PROJECT_ID != '' }}
        run: npx vercel deploy --prebuilt --prod --token=${{ env.VERCEL_TOKEN }}


